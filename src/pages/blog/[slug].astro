---
import { CollectionEntry, getCollection, getEntryBySlug } from "astro:content"
import { format } from "date-fns"
import Avatar from "~/components/Avatar.astro"
// import Category from "./_components/Category.astro"
import { resolveCoverImage, resolveSocialImage } from "~/content/blog/_resolveImage.js"
import { randomFromArray } from "~/helpers/random.js"
import Layout from "~/layouts/MainLayout.astro"
import Badge from "./_components/Badge.astro"
import { Breadcrumbs } from "astro-breadcrumbs";
export const prerender = true

export async function getStaticPaths() {
	const blog = await getCollection("blog")

	return blog.map((post) => ({
		params: { slug: post.slug },
		props: { post },
	}))
}

type Props = {
	post: CollectionEntry<"blog">
}

const { post } = Astro.props

const { data, render } = post
const { Content } = await render()

const coverImage = await resolveCoverImage(post)
const socialImage = await resolveSocialImage(post)

const authors = await Promise.all(
	data.authors.map((author) => getEntryBySlug("authors", author)),
).then((authors) => authors.filter(Boolean) as CollectionEntry<"authors">[])


const categories = await Promise.all(
	data.categories.map((category) => getEntryBySlug("categories", category)),
).then((categories) => categories.filter(Boolean) as CollectionEntry<"categories">[])

console.log(data.categories)

console.log(categories)
const gradients = [
	"bg-red-pink-gradient",
	"bg-blue-green-gradient",
	"bg-blue-purple-gradient",
	"bg-orange-yellow-gradient",
]


const placeholderGradient = randomFromArray(gradients)
---

<Layout
	title={data.title}
	description={data.description}
	pageType="article"
	image={socialImage && { src: socialImage.src, alt: data.title }}
>
	{
		coverImage ? (
			<div class="mx-auto w-full max-w-screen-lg md:-mb-10 lg:-mb-12 xl:-mb-16">
				<img
					src={coverImage.src}
					width={coverImage.width}
					height={coverImage.height}
					loading="lazy"
					decoding="async"
					alt=""
					class="w-full"
				/>
			</div>
		) : (
			<div
				class:list={[
					"w-full h-64 -mb-56 md:h-64 md:-mb-52 lg:h-96 lg:-mb-80 noise-underlay",
					placeholderGradient,
				]}
			/>
		)
	}

	<div class="grid-container relative mx-auto max-w-screen-lg md:z-10">
		
		<div
			class="noise-container mx-auto w-fit max-w-full bg-astro-gray-700 py-5 sm:py-8 md:px-10 md:py-12 lg:p-12 lg:py-16 xl:p-16 xl:py-20"
		>
	        <Breadcrumbs indexText="Home">
          <span slot="index">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="20"
              height="20"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
              ><path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"
              ></path><polyline points="9 22 9 12 15 12 15 22"></polyline></svg
            >
          </span>
          <span slot="separator" class="c-breadcrumbs__separator">/</span>
        </Breadcrumbs>		
					{
				data.categories.map((category) => {
					return (
						<div class="flex items-center gap-2 category">


				<a href={"/blogs/tags/"+category.trim().replace(" ","-")} class="link whitespace-nowrap">
				<p>{category}</p>
				</a>

										</div>

					)
				})
			}
			<div class="noise"></div>

			
			<header class="mx-auto w-full max-w-prose text-center">

				<h1 class="heading-3 mb-4 mt-2 md:heading-2 sm:mb-5 sm:mt-3">{data.title}</h1>
				<div class="code flex flex-wrap items-center justify-center gap-4 text-astro-gray-200">
					<span>By</span>
					{
						authors.map((author) => {
							return (
								<div class="flex items-center gap-2">
									<Avatar name={author.slug} lg />
									<a href={author.data.twitter} class="link whitespace-nowrap">
									<span>{author.data.name}</span>
									</a>
								</div>
							)
						})
					}
		
				<time class="code text-astro-gray-200" datetime={data.publishDate.toISOString()}>
				Updated on {format(data.publishDate, "MMMM d, yyyy")}
				</time>					
				</div>
			</header>
			<hr class="-mx-16 my-16 border-astro-gray-500" />

			
			<article class="prose">
				<Content />
			</article>
		</div>
	</div>
</Layout>

<script>
	// Remove autoplay from videos when `prefers-reduced-motion: reduce`
	const autoplayVideos = document.querySelectorAll("video[autoplay]")
	const prefersReducedMotion = window.matchMedia("(prefers-reduced-motion: reduce)").matches

	if (prefersReducedMotion) {
		autoplayVideos.forEach((video) => {
			video.removeAttribute("autoplay")
			// Add controls attribute so user can still play the video if they want
			video.setAttribute("controls", "true")
		})
	}
</script>
